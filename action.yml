# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: 'opencv action'
description: 'Build and install opencv'
inputs:
  opencv_tag:
    description: 'The tag(release version) of opencv'
    required: true
    default: '4.5.5' # or master
runs:
  using: "composite"
  steps:
    - name: clone opencv
      run: git clone https://github.com/opencv/opencv -b ${{ inputs.opencv_tag }} --depth 1
      shell: bash
    
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: Set env
      run: echo "opencv_tag=${{ inputs.opencv_tag }}" >> $GITHUB_ENV
      shell: bash
    - name: Test env
      run: echo $opencv_tag
      shell: bash

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: configure opencv
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake . -B build -T v143,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/artifacts/opencv/${{ inputs.opencv_tag }}/windows-x64" -DCMAKE_BUILD_TYPE=Release -DBUILD_LIST=core,imgcodecs,imgproc -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF  -D BUILD_opencv_python3=OFF -D WITH_IPP=OFF -D WITH_PROTOBUF=OFF -D WITH_QUIRC=OFF -D WITH_EIGEN=OFF -DWITH_WEBP=OFF
        elif [ "$RUNNER_OS" == "Linux" ]; then
          cmake . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts/opencv/${{ inputs.opencv_tag }}/linux-x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_LIST=core,imgcodecs,imgproc -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF  -D BUILD_opencv_python3=OFF -D WITH_IPP=OFF -D WITH_PROTOBUF=OFF -D WITH_QUIRC=OFF -D WITH_EIGEN=OFF -DWITH_WEBP=OFF
        elif [ "$RUNNER_OS" == "macOS" ]; then
          cmake . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts/opencv/${{ inputs.opencv_tag }}/mac-x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_LIST=core,imgcodecs,imgproc -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF  -D BUILD_opencv_python3=OFF -D WITH_IPP=OFF -D WITH_PROTOBUF=OFF -D WITH_QUIRC=OFF -D WITH_EIGEN=OFF -DWITH_WEBP=OFF
        fi
      working-directory: opencv
      shell: bash

    - name: build opencv
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Release
        else
          cmake --build .
        fi
      working-directory: opencv/build
      shell: bash

    - name: install opencv
      run: cmake --install . --config Release
      working-directory: opencv/build
      shell: bash

    - name: clean up
      run: rm -R opencv
      shell: bash

branding:
  icon: activity
  color: gray-dark
